# docker-compose.yml
version: '3.8'
services:
  selenium:
    image: seleniarm/standalone-chromium:4.8.3
    ports:
      - "4444:4444"
      - "7900:7900"
      - "9222:9222"
    shm_size: "6g"
    environment:
      - SE_NODE_MAX_SESSIONS=1
      - SE_NODE_SESSION_TIMEOUT=120
      - SE_START_XVFB=true
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
      - SE_DRAIN_AFTER_SESSION_COUNT=5
      - SE_GRID_HEARTBEAT_PERIOD=2000
      - SE_GRID_MAX_SESSION=1
      - GRID_DEBUG=false
      - SE_LOG_LEVEL=WARN
      - CHROME_DRIVER_VERSION=111.0.5563.146 
    volumes:
      - /dev/shm:/dev/shm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      app_network:
        aliases:
          - selenium-grid
    command: >
      bash -c "chromium --version && 
      chromedriver --version && 
      /opt/bin/entry_point.sh"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  web:
    build: .
    networks:
      - app_network
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - LOG_LEVEL=INFO
      - PORT=8000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    depends_on:
      selenium:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/venv
      - /app/__pycache__
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload


networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
